import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as i,c as l,a as e,b as o,d as a,e as c}from"./app-6a854ac3.js";const s={},n=e("h1",{id:"开始",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#开始","aria-hidden":"true"},"#"),o(" 开始")],-1),h=e("p",null,"此文档将引导你使用本项目。",-1),p=e("h2",{id:"许可证",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#许可证","aria-hidden":"true"},"#"),o(" 许可证")],-1),g={href:"https://github.com/Charles-Hello/Tg_User_Client/blob/main/LICENSE",target:"_blank",rel:"noopener noreferrer"},b=e("div",{class:"hint-container danger"},[e("p",{class:"hint-container-title"},"AGPLv3"),e("p",null,"本项目不带有主动添加，涉及金钱接口，不鼓励、不支持一切商业使用。")],-1),u=e("h2",{id:"上游依赖",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#上游依赖","aria-hidden":"true"},"#"),o(" 上游依赖")],-1),_={href:"https://github.com/LonamiWebs/Telethon",target:"_blank",rel:"noopener noreferrer"},k=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"Telethon"),e("p",null,"Telethon是一个asyncio Python 3 MTProto库，用于与Telegram的API进行交互。 作为用户或通过机器人帐户")],-1),f=e("h2",{id:"onebot12",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#onebot12","aria-hidden":"true"},"#"),o(" Onebot12")],-1),x={href:"https://12.onebot.dev/",target:"_blank",rel:"noopener noreferrer"},m=c('<div class="hint-container tip"><p class="hint-container-title">Onebot12</p><p>OneBot 是一个聊天机器人应用接口标准，旨在统一不同聊天平台上的机器人应用开发接口，使开发者只需编写一次业务逻辑代码即可应用到多种机器人平台。</p></div><p>目前支持的通信方式:</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> HTTP</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> HTTP Webhook</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 正向 WebSocket</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 反向 WebSocket</label></li></ul><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><p>本项目下的 <code>.env</code> 文件为项目配置文件，下面讲解配置文件项目。</p><h1 id="项目其他的配置项" tabindex="-1"><a class="header-anchor" href="#项目其他的配置项" aria-hidden="true">#</a> 项目其他的配置项</h1><h3 id="tgusername" tabindex="-1"><a class="header-anchor" href="#tgusername" aria-hidden="true">#</a> <code>tgusername</code></h3><p>Tgusername 存储凭证</p><ul><li><strong>类型:</strong> <code>str</code></li></ul><p>用于存储 Tgusername 的凭证，方便以后迁移。</p><h3 id="tg-api-id" tabindex="-1"><a class="header-anchor" href="#tg-api-id" aria-hidden="true">#</a> <code>tg_api_id</code></h3><p>Tg API ID</p><ul><li><strong>类型:</strong> <code>int</code></li></ul><p>Telegram API 的身份标识符。</p><h3 id="tg-api-hash" tabindex="-1"><a class="header-anchor" href="#tg-api-hash" aria-hidden="true">#</a> <code>tg_api_hash</code></h3><p>Tg API Hash</p><ul><li><strong>类型:</strong> <code>str</code></li></ul><p>Telegram API 的身份验证哈希值。</p><h3 id="tg-proxy" tabindex="-1"><a class="header-anchor" href="#tg-proxy" aria-hidden="true">#</a> <code>tg_proxy</code></h3><p>启用 Telegram 代理</p><ul><li><strong>类型:</strong> <code>bool</code></li></ul><p>是否启用 Telegram 代理。</p><h3 id="tg-proxy-mode" tabindex="-1"><a class="header-anchor" href="#tg-proxy-mode" aria-hidden="true">#</a> <code>tg_proxy_mode</code></h3><p>Telegram 代理模式</p><ul><li><strong>类型:</strong> <code>str</code></li></ul><p>指定 Telegram 代理的模式，例如 &#39;socks5&#39;。</p><h3 id="tg-proxy-host" tabindex="-1"><a class="header-anchor" href="#tg-proxy-host" aria-hidden="true">#</a> <code>tg_proxy_host</code></h3><p>Telegram 代理主机</p><ul><li><strong>类型:</strong> <code>str</code></li></ul><p>Telegram 代理的主机地址。</p><h3 id="tg-proxy-port" tabindex="-1"><a class="header-anchor" href="#tg-proxy-port" aria-hidden="true">#</a> <code>tg_proxy_port</code></h3><p>Telegram 代理端口</p><ul><li><strong>类型:</strong> <code>int</code></li></ul><p>Telegram 代理的端口号。</p><h3 id="tg-proxy-user" tabindex="-1"><a class="header-anchor" href="#tg-proxy-user" aria-hidden="true">#</a> <code>tg_proxy_user</code></h3><p>Telegram 代理用户名</p><ul><li><strong>类型:</strong> <code>str</code></li></ul><p>如果代理需要身份验证，指定代理用户名。</p><h3 id="tg-proxy-pass" tabindex="-1"><a class="header-anchor" href="#tg-proxy-pass" aria-hidden="true">#</a> <code>tg_proxy_pass</code></h3><p>Telegram 代理密码</p><ul><li><strong>类型:</strong> <code>str</code></li></ul><p>如果代理需要身份验证，指定代理密码。</p><h3 id="tg-qrlogin" tabindex="-1"><a class="header-anchor" href="#tg-qrlogin" aria-hidden="true">#</a> <code>tg_qrlogin</code></h3><p>启用 Tg QR 登录</p><ul><li><strong>类型:</strong> <code>bool</code></li></ul><p>是否启用 Telegram QR 登录功能。</p><h3 id="tg-qrlogin-qrweb-port" tabindex="-1"><a class="header-anchor" href="#tg-qrlogin-qrweb-port" aria-hidden="true">#</a> <code>tg_qrlogin_qrWeb_port</code></h3><p>Tg QR Web 端口</p><ul><li><strong>类型:</strong> <code>int</code></li></ul><p>启用 QR 登录时的 QR 码 Web 服务端口。</p><h3 id="tg-qq-email-status" tabindex="-1"><a class="header-anchor" href="#tg-qq-email-status" aria-hidden="true">#</a> <code>tg_qq_email_status</code></h3><p>Tg QQ 邮件状态</p><ul><li><strong>类型:</strong> <code>bool</code></li></ul><p>指定 Tg QQ 登录的邮件状态。</p><h3 id="tg-qrlogin-qqemail" tabindex="-1"><a class="header-anchor" href="#tg-qrlogin-qqemail" aria-hidden="true">#</a> <code>tg_qrlogin_qqemail</code></h3><p>Tg QQ 登录邮件</p><ul><li><strong>类型:</strong> <code>str</code></li></ul><p>Tg QQ 登录的邮件地址。</p><h3 id="tg-qrlogin-qqemail-fakestr" tabindex="-1"><a class="header-anchor" href="#tg-qrlogin-qqemail-fakestr" aria-hidden="true">#</a> <code>tg_qrlogin_qqemail_fakeStr</code></h3><p>qr_emailfake_str 防伪标识符</p><ul><li><strong>类型:</strong> <code>str</code></li></ul><p>Tg QQ 登录邮件的防伪标识符。</p><h1 id="应用端配置" tabindex="-1"><a class="header-anchor" href="#应用端配置" aria-hidden="true">#</a> 应用端配置</h1><p>以下是应用端配置，通常无需更改。</p><h3 id="application-ws-host" tabindex="-1"><a class="header-anchor" href="#application-ws-host" aria-hidden="true">#</a> <code>application_ws_host</code></h3><p>应用端的 WebSocket 主机</p><ul><li><strong>类型:</strong> <code>str</code></li></ul><p>应用端的 WebSocket 主机地址。</p><h3 id="application-ws-port" tabindex="-1"><a class="header-anchor" href="#application-ws-port" aria-hidden="true">#</a> <code>application_ws_port</code></h3><p>应用端的 WebSocket 端口</p><ul><li><strong>类型:</strong> <code>str</code></li></ul><p>应用端的 WebSocket 端口号。</p><h3 id="host" tabindex="-1"><a class="header-anchor" href="#host" aria-hidden="true">#</a> <code>host</code></h3><p>服务Host</p><ul><li><strong>类型:</strong> <code>IPvAnyAddress</code></li><li><strong>默认值:</strong> <code>127.0.0.1</code></li></ul><p>在使用 <code>http</code> 和 <code>正向 websocket</code> 方式时会监听此host</p><h3 id="port" tabindex="-1"><a class="header-anchor" href="#port" aria-hidden="true">#</a> <code>port</code></h3><p>服务端口</p><ul><li><strong>类型:</strong> <code>int</code>(1~65535)</li><li><strong>默认值:</strong> <code>8000</code></li></ul><p>在使用 <code>http</code> 和 <code>正向 websocket</code> 方式时会监听此端口，注意不要和其他端口冲突！</p><h3 id="access-token" tabindex="-1"><a class="header-anchor" href="#access-token" aria-hidden="true">#</a> <code>access_token</code></h3><p>访问令牌</p><ul><li><strong>类型:</strong> <code>str</code></li><li><strong>默认值:</strong> <code>&quot;&quot;</code></li></ul><p>配置了访问令牌后，与本服务通信的另一端也要配置同样的token，否则会连接失败。</p><h3 id="heartbeat-enabled" tabindex="-1"><a class="header-anchor" href="#heartbeat-enabled" aria-hidden="true">#</a> <code>heartbeat_enabled</code></h3><p>心跳事件</p><ul><li><strong>类型:</strong> <code>bool</code></li><li><strong>默认值:</strong> <code>false</code></li></ul><p>开启心跳后，将周期向连接端发送心跳事件。</p><h3 id="heartbeat-interval" tabindex="-1"><a class="header-anchor" href="#heartbeat-interval" aria-hidden="true">#</a> <code>heartbeat_interval</code></h3><p>心跳间隔</p><ul><li><strong>类型:</strong> <code>int</code>(1~65535)</li><li><strong>默认值:</strong> <code>5000</code></li></ul><p>开启心跳后有用，单位毫秒，必须大于0</p><h3 id="enable-http-api" tabindex="-1"><a class="header-anchor" href="#enable-http-api" aria-hidden="true">#</a> <code>enable_http_api</code></h3><p>开启http访问</p><ul><li><strong>类型:</strong> <code>bool</code></li><li><strong>默认值:</strong> <code>true</code></li></ul><p>是否开启http访问功能。</p><h3 id="event-enabled" tabindex="-1"><a class="header-anchor" href="#event-enabled" aria-hidden="true">#</a> <code>event_enabled</code></h3><p>启用get_latest_events</p><ul><li><strong>类型:</strong> <code>bool</code></li><li><strong>默认值:</strong> <code>false</code></li></ul><p>开启http时有效，是否启用 <code>get_latest_events</code> 原动作</p><h3 id="event-buffer-size" tabindex="-1"><a class="header-anchor" href="#event-buffer-size" aria-hidden="true">#</a> <code>event_buffer_size</code></h3><p>缓冲区大小</p><ul><li><strong>类型:</strong> <code>int</code></li><li><strong>默认值:</strong> <code>0</code></li></ul><p><code>get_latest_events</code> 存储的事件缓冲区大小，超过该大小将会丢弃最旧的事件，0 表示不限大小</p><h3 id="enable-http-webhook" tabindex="-1"><a class="header-anchor" href="#enable-http-webhook" aria-hidden="true">#</a> <code>enable_http_webhook</code></h3><p>启用http webhook</p><ul><li><strong>类型:</strong> <code>bool</code></li><li><strong>默认值:</strong> <code>false</code></li></ul><p>是否启用http webhook。</p><h3 id="webhook-url" tabindex="-1"><a class="header-anchor" href="#webhook-url" aria-hidden="true">#</a> <code>webhook_url</code></h3><p>上报地址</p><ul><li><strong>类型:</strong> <code>Set(URL)</code></li><li><strong>默认值:</strong> <code>[&quot;http://127.0.0.1:8080/onebot/v12/http/&quot;]</code></li></ul><p>启用webhook生效，webhook 上报地址，需要以<code>http://</code>开头，多个地址用<code>,</code>分隔。</p><h3 id="webhook-timeout" tabindex="-1"><a class="header-anchor" href="#webhook-timeout" aria-hidden="true">#</a> <code>webhook_timeout</code></h3><p>上报请求超时时间</p><ul><li><strong>类型:</strong> <code>int</code></li><li><strong>默认值:</strong> <code>5000</code></li></ul><p>启用webhook生效，单位：毫秒，0 表示不超时</p><h3 id="websocekt-type" tabindex="-1"><a class="header-anchor" href="#websocekt-type" aria-hidden="true">#</a> <code>websocekt_type</code></h3><p>websocket连接方式</p><ul><li><strong>类型:</strong> <code>str</code></li><li><strong>默认值:</strong> <code>Unable</code></li></ul><p>只能是以下值：</p><ul><li><code>Unable</code> : 不开启websocket连接</li><li><code>Forward</code> : 正向websocket连接</li><li><code>Backward</code> : 反向websocket连接</li></ul><h3 id="websocket-url" tabindex="-1"><a class="header-anchor" href="#websocket-url" aria-hidden="true">#</a> <code>websocket_url</code></h3><p>连接地址</p><ul><li><strong>类型:</strong> <code>Set(URL)</code></li><li><strong>默认值:</strong> <code>[&quot;ws://127.0.0.1:8080/onebot/v12/ws/&quot;]</code></li></ul><p>反向websocket连接时生效，反向 WebSocket 连接地址，需要以<code>ws://</code>或<code>wss://</code>开头，多个地址用<code>,</code>分隔。</p><h3 id="reconnect-interval" tabindex="-1"><a class="header-anchor" href="#reconnect-interval" aria-hidden="true">#</a> <code>reconnect_interval</code></h3><p>重连间隔</p><ul><li><strong>类型:</strong> <code>int</code></li><li><strong>默认值:</strong> <code>5000</code></li></ul><p>反向websocket连接时生效，反向 WebSocket 重连间隔，单位：毫秒，必须大于 0</p><h3 id="websocket-buffer-size" tabindex="-1"><a class="header-anchor" href="#websocket-buffer-size" aria-hidden="true">#</a> <code>websocket_buffer_size</code></h3><p>缓冲区大小</p><ul><li><strong>类型</strong> <code>int</code></li><li><strong>默认值</strong> <code>4</code></li></ul><p>反向websocket连接时生效，反向 WebSocket 缓冲区大小，单位：mb，必须大于 0</p><h3 id="log-level" tabindex="-1"><a class="header-anchor" href="#log-level" aria-hidden="true">#</a> <code>log_level</code></h3><p>日志等级</p><ul><li><strong>类型:</strong> <code>str</code></li><li><strong>默认值:</strong> <code>INFO</code></li></ul><p>一般为以下值：</p><ul><li><code>INFO</code> : 正常使用</li><li><code>DEBUG</code> : debug下使用</li></ul><h3 id="log-days" tabindex="-1"><a class="header-anchor" href="#log-days" aria-hidden="true">#</a> <code>log_days</code></h3><p>保存天数</p><ul><li><strong>类型:</strong> <code>int</code></li><li><strong>默认值:</strong> <code>10</code></li></ul><p>日志保存天数。</p><h3 id="cache-days" tabindex="-1"><a class="header-anchor" href="#cache-days" aria-hidden="true">#</a> <code>cache_days</code></h3><p>缓存天数</p><ul><li><strong>类型:</strong> <code>int</code></li><li><strong>默认值:</strong> <code>0</code></li></ul><p>临时文件缓存天数，为0则不清理缓存</p><h2 id="使用-nonebot2" tabindex="-1"><a class="header-anchor" href="#使用-nonebot2" aria-hidden="true">#</a> 使用 Nonebot2</h2>',147),w={href:"https://v2.nonebot.dev/",target:"_blank",rel:"noopener noreferrer"},q=e("ol",null,[e("li",null,"建议使用反向websocket通信；"),e("li",null,"nonebot2需要安装onebot适配器，并使用12版本；")],-1);function T(v,y){const t=d("ExternalLinkIcon");return i(),l("div",null,[n,h,p,e("p",null,[o("本项目采用 "),e("a",g,[o("AGPLv3"),a(t)]),o(" 许可证")]),b,u,e("p",null,[o("本项目依赖上游："),e("a",_,[o("Telethon"),a(t)]),o("。")]),k,f,e("p",null,[o("本项目使用 "),e("a",x,[o("Onebot12"),a(t)]),o(" 作为协议进行传输数据")]),m,e("p",null,[o("本项目支持与 "),e("a",w,[o("Nonebot2"),a(t)]),o(" 进行通信，使用时请注意：")]),q])}const W=r(s,[["render",T],["__file","index.html.vue"]]);export{W as default};
